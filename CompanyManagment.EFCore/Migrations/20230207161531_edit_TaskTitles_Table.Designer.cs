// <auto-generated />
using System;
using CompanyManagment.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyManagment.EFCore.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20230207161531_edit_TaskTitles_Table")]
    partial class edit_TaskTitles_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Domain.BillAgg.EntityBill", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Appointed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessingStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectBill")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("id");

                    b.ToTable("TextManager_Bill");
                });

            modelBuilder.Entity("Company.Domain.Board.Board", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardChairman")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BoardType_Id")
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DisputeResolutionPetitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpertReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("File_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("BoardType_Id");

                    b.HasIndex("File_Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Company.Domain.BoardType.BoardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BoardTypes");
                });

            modelBuilder.Entity("Company.Domain.ChapterAgg.EntityChapter", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chapter")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Subtitle_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Subtitle_Id");

                    b.ToTable("TextManager_Chapter");
                });

            modelBuilder.Entity("Company.Domain.Contact2Agg.EntityContact", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TextManager_Contact");
                });

            modelBuilder.Entity("Company.Domain.ContarctingPartyAgg.PersonalContractingParty", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IsLegal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nationalcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisterId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("id");

                    b.ToTable("PersonalContractingParties");
                });

            modelBuilder.Entity("Company.Domain.ContractAgg.Contract", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgreementSalary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArchiveCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConsumableItems")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ContarctStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContractPeriod")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayliWage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyAllowance")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("GetWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HousingAllowance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IsActiveString")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("JobTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MandatoryHoursid")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonnelCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SetContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Signature")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("WorkingHoursWeekly")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WorkshopAddress1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WorkshopAddress2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("WorkshopIds")
                        .HasColumnType("bigint");

                    b.Property<long>("YearlySalaryId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("MandatoryHoursid");

                    b.HasIndex("WorkshopIds");

                    b.HasIndex("YearlySalaryId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Company.Domain.EmployeeAgg.Employee", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankCardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("EservicePassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EserviceUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("InsuranceHistoryByMonth")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("InsuranceHistoryByYear")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsActiveString")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LevelOfEducation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MclsPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MclsUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MilitaryService")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumberOfChildren")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceOfIssue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SanaPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SanaUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOfficeUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOfficepassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Company.Domain.EmployeeChildrenAgg.EmployeeChildren", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ParentNationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeChildren");
                });

            modelBuilder.Entity("Company.Domain.Evidence.Evidence", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardType_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("File_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("BoardType_Id");

                    b.HasIndex("File_Id");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("Company.Domain.EvidenceDetail.EvidenceDetail", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Evidence_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("Evidence_Id");

                    b.ToTable("EvidenceDetails");
                });

            modelBuilder.Entity("Company.Domain.File1.File1", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArchiveNo")
                        .HasColumnType("bigint");

                    b.Property<int>("Client")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClientVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HasMandate")
                        .HasColumnType("int");

                    b.Property<string>("ProceederReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Reqester")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("Summoned")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Company.Domain.FileAlert.FileAlert", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdditionalDeadline")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileState_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("File_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("FileState_Id");

                    b.HasIndex("File_Id");

                    b.ToTable("File_Alerts");
                });

            modelBuilder.Entity("Company.Domain.FileState.FileState", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileTiming_Id")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("FileTiming_Id");

                    b.ToTable("File_States");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 766, DateTimeKind.Local).AddTicks(8582),
                            FileTiming_Id = 1L,
                            State = 1,
                            Title = "کلاسه پرونده ثبت نشده است"
                        },
                        new
                        {
                            id = 2L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6290),
                            FileTiming_Id = 1L,
                            State = 2,
                            Title = "وکالت نامه پرونده ثبت نشده است"
                        },
                        new
                        {
                            id = 8L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6351),
                            FileTiming_Id = 1L,
                            State = 8,
                            Title = "تاریخ ثبت دادخواست ثبت نشده است"
                        },
                        new
                        {
                            id = 3L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6358),
                            FileTiming_Id = 2L,
                            State = 3,
                            Title = "دعوتنامه ای برای جلسات دادگاه تشخیص صادر نشده است"
                        },
                        new
                        {
                            id = 4L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6363),
                            FileTiming_Id = 3L,
                            State = 4,
                            Title = "دعوتنامه جدید یا دادنامه تشخیص صادر نشده است"
                        },
                        new
                        {
                            id = 5L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6368),
                            FileTiming_Id = 4L,
                            State = 5,
                            Title = "اعتراض برای پرونده ثبت نشده است"
                        },
                        new
                        {
                            id = 6L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6372),
                            FileTiming_Id = 5L,
                            State = 6,
                            Title = "دعوتنامه ای برای جلسات دادگاه تجدیدنظر صادر نشده است"
                        },
                        new
                        {
                            id = 7L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 771, DateTimeKind.Local).AddTicks(6376),
                            FileTiming_Id = 6L,
                            State = 7,
                            Title = "دعوتنامه جدید یا دادنامه تجدیدنظر صادر نشده است"
                        });
                });

            modelBuilder.Entity("Company.Domain.FileTiming.FileTiming", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Deadline")
                        .HasColumnType("int");

                    b.Property<string>("Tips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("File_Timings");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(1636),
                            Deadline = 1,
                            Tips = "	پس از مراجعه موکل و ثبت اولیه پرونده در نرم افزار ، در صورتی که تا پایان زمان مندرج در کادر ، موکل پرونده را تعیین و تکلیف ننماید و شما قادر به ورود به پرونده نباشید ، نرم افزار به شما گزارش میدهد . ",
                            Title = "ثبت اولیه در سیستم"
                        },
                        new
                        {
                            id = 2L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(3172),
                            Deadline = 1,
                            Tips = "	پس از ارائه دادخواست توسط شما یا موکل ، اگر تا پایان مهلت مندرج در این کادر ، دعوتنامه ای صادر نشده باشد ، نرم افزار به شما گزارش میدهد . ",
                            Title = "انتظار برای دریافت دعوتنامه اول"
                        },
                        new
                        {
                            id = 3L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(3205),
                            Deadline = 1,
                            Tips = "	پس از شرکت در جلسه اول رسیدگی ، اگر تا پایان مهلت مندرج در کادر ، دعوتنامه جدید یا دادنامه صادر نشده باشد ، نرم افزار به شما گزارش میدهد . ",
                            Title = "انتظار برای دریافت دعوتنامه دوم به بعد یا دادنامه"
                        },
                        new
                        {
                            id = 4L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(3210),
                            Deadline = 1,
                            Tips = "	پس از صدور دادنامه ، تا قبل از پایان مدت اعتراض مندرج در کادر ، اخطار مهلت اعتراض را نرم افزار به شما گزارش میدهد تا در فرصت مقرر اقدام به ثبت اعتراض نمائید . بدیهیست در صورت عدم ثبت اعتراض در مهلت مقرر دادنامه شما قطعی خواهد شد . ",
                            Title = "مهلت اعتراض به دادنامه"
                        },
                        new
                        {
                            id = 5L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(3214),
                            Deadline = 1,
                            Tips = "پس از ثبت اعتراض ، در صورتی که تا پایان مهلت مندرج در کادر ، دعوتنامه ای برای شما صادر نگردد ، نرم افزار به شما گزارش میدهد . ",
                            Title = "انتظار برای دریافت دعوتنامه پس از اعتراض"
                        },
                        new
                        {
                            id = 6L,
                            CreationDate = new DateTime(2023, 2, 7, 19, 45, 29, 775, DateTimeKind.Local).AddTicks(3217),
                            Deadline = 1,
                            Tips = "پس از شرکت در جلسه اول رسیدگی ، اگر تا پایان مهلت مندرج در کادر ، دعوتنامه جدید یا دادنامه صادر نشده باشد ، نرم افزار به شما گزارش میدهد .",
                            Title = "انتظار برای دریافت دعوتنامه دوم به بعد یا دادنامه"
                        });
                });

            modelBuilder.Entity("Company.Domain.FileTitle.FileTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("File_Titles");
                });

            modelBuilder.Entity("Company.Domain.HolidayAgg.Holiday", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Company.Domain.HolidayItemAgg.HolidayItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HolidayId")
                        .HasColumnType("bigint");

                    b.Property<string>("HolidayYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime>("Holidaydate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("HolidayId");

                    b.ToTable("Holidayitems");
                });

            modelBuilder.Entity("Company.Domain.JobAgg.Job", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Company.Domain.LeaveAgg.Leave", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndLeave")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveHourses")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("LeaveType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PaidLeaveType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("StartLeave")
                        .HasColumnType("datetime2");

                    b.Property<long>("WorkshopId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkshopName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("Company.Domain.LeftWorkAgg.LeftWork", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LeftWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WorkshopId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkshopName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("LeftWork");
                });

            modelBuilder.Entity("Company.Domain.MandatoryHoursAgg.MandatoryHours", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Aban")
                        .HasColumnType("float");

                    b.Property<double>("Azar")
                        .HasColumnType("float");

                    b.Property<double>("Bahman")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Dey")
                        .HasColumnType("float");

                    b.Property<double>("Esfand")
                        .HasColumnType("float");

                    b.Property<double>("Farvardin")
                        .HasColumnType("float");

                    b.Property<double>("Khordad")
                        .HasColumnType("float");

                    b.Property<double>("Mehr")
                        .HasColumnType("float");

                    b.Property<double>("Mordad")
                        .HasColumnType("float");

                    b.Property<double>("Ordibehesht")
                        .HasColumnType("float");

                    b.Property<double>("Shahrivar")
                        .HasColumnType("float");

                    b.Property<double>("Tir")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MandatoryHours");
                });

            modelBuilder.Entity("Company.Domain.MasterPenaltyTitle.MasterPenaltyTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MasterPetition_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("PaidAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemainingAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("MasterPetition_Id");

                    b.ToTable("Master_PenaltyTitles");
                });

            modelBuilder.Entity("Company.Domain.MasterPetition.MasterPetition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardType_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("File_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("MasterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkHistoryDescreption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("BoardType_Id");

                    b.HasIndex("File_Id");

                    b.ToTable("Master_Petitions");
                });

            modelBuilder.Entity("Company.Domain.MasterWorkHistory.MasterWorkHistory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MasterPetition_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkingHoursPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingHoursPerWeek")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MasterPetition_Id");

                    b.ToTable("Master_WorkHistories");
                });

            modelBuilder.Entity("Company.Domain.ModuleAgg.EntityModule", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSubModule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TextManager_Module");
                });

            modelBuilder.Entity("Company.Domain.ModuleTextManagerAgg.EntityModuleTextManager", b =>
                {
                    b.Property<long>("TextManagerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.HasKey("TextManagerId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("TextManager_ModuleTextManager");
                });

            modelBuilder.Entity("Company.Domain.OriginalTitleAgg.EntityOriginalTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id");

                    b.ToTable("TextManager_OriginalTitle");
                });

            modelBuilder.Entity("Company.Domain.PenaltyTitle.PenaltyTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaidAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Petition_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("RemainingAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("Petition_Id");

                    b.ToTable("PenaltyTitles");
                });

            modelBuilder.Entity("Company.Domain.Petition.Petition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardType_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("File_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NotificationPetitionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PetitionIssuanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TotalPenalty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalPenaltyTitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkHistoryDescreption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("BoardType_Id");

                    b.HasIndex("File_Id");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("Company.Domain.ProceedingSession.ProceedingSession", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Board_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Board_Id");

                    b.ToTable("ProceedingSessions");
                });

            modelBuilder.Entity("Company.Domain.SubtitleAgg.EntitySubtitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntitySubtitleid")
                        .HasColumnType("bigint");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OriginalTitle_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id");

                    b.HasIndex("EntitySubtitleid");

                    b.HasIndex("OriginalTitle_Id");

                    b.ToTable("TextManager_Subtitle");
                });

            modelBuilder.Entity("Company.Domain.Task.Task", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Commander_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Customer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReferralRecipient_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("SeniorUser_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskTitle_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("TaskTitle_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Company.Domain.TaskStatus.TaskStatus", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeadlineExtention")
                        .HasColumnType("int");

                    b.Property<short>("DeadlineExtentionStatus")
                        .HasColumnType("smallint");

                    b.Property<int>("Done")
                        .HasColumnType("int");

                    b.Property<short>("DoneStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("DoneTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Impossibility")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImpossibilityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImpossibilityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ImpossibilityStatus")
                        .HasColumnType("smallint");

                    b.Property<long>("Task_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Task_Id")
                        .IsUnique();

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("Company.Domain.TaskTitle.TaskTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TaskTitles");
                });

            modelBuilder.Entity("Company.Domain.TextManagerAgg.EntityTextManager", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Chapter_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTextManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsActiveString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberTextManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OriginalTitle_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectTextManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Subtitle_Id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("TextManager_TextManager");
                });

            modelBuilder.Entity("Company.Domain.WorkHistory.WorkHistory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Petition_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkingHoursPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingHoursPerWeek")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Petition_Id");

                    b.ToTable("WorkHistories");
                });

            modelBuilder.Entity("Company.Domain.WorkingHoursAgg.WorkingHours", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContractNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberOfFriday")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NumberOfWorkingDays")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OverNightWorkH")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OverNightWorkM")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("OverTimeWorkH")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("OverTimeWorkM")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ShiftWork")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("TotalHoursesH")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TotalHoursesM")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("WeeklyWorkingTime")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("id");

                    b.HasIndex("ContractId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Company.Domain.WorkingHoursItemsAgg.WorkingHoursItems", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplexEnd")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ComplexStart")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWork")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("End1")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("End2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("End3")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("RestTime")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Start1")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Start2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Start3")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("WorkingHoursId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("WorkingHoursItems");
                });

            modelBuilder.Entity("Company.Domain.WorkshopAccountAgg.WorkshopAccount", b =>
                {
                    b.Property<long>("WorkshopId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkshopId", "AccountId");

                    b.ToTable("WorkshopeAccounts");
                });

            modelBuilder.Entity("Company.Domain.WorkshopAgg.Workshop", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AgentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArchiveCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContractTerm")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsActiveString")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeOfContract")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeOfInsuranceSend")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeOfOwnership")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkshopFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WorkshopName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WorkshopSureName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("Company.Domain.WorkshopEmployerAgg.WorkshopEmployer", b =>
                {
                    b.Property<long>("WorkshopId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkshopId", "EmployerId");

                    b.HasIndex("EmployerId");

                    b.ToTable("WorkshopeEmployers");
                });

            modelBuilder.Entity("Company.Domain.YearlySalaryAgg.YearlySalary", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("id");

                    b.ToTable("YearlySalariess");
                });

            modelBuilder.Entity("Company.Domain.YearlySalaryItemsAgg.YearlySalaryItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("ItemValue")
                        .HasColumnType("float");

                    b.Property<int>("ParentConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("ValueType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("YearlySalaryId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("YearlySalaryId");

                    b.ToTable("YearlyItems");
                });

            modelBuilder.Entity("Company.Domain.YearlysSalaryTitleAgg.YearlySalaryTitle", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title10")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title4")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title5")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title6")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title7")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title8")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title9")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.ToTable("YearlySalaryTitles");
                });

            modelBuilder.Entity("Company.Domain.empolyerAgg.Employer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AgentPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ContractingPartyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerLName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployerNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EservicePassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EserviceUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsLegal")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MclsPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MclsUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nationalcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceOfIssue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisterId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SanaPassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SanaUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOfficeUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxOfficepassword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.HasIndex("ContractingPartyId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("EmployerWorkshop", b =>
                {
                    b.Property<long>("EmployersListid")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkshopsListid")
                        .HasColumnType("bigint");

                    b.HasKey("EmployersListid", "WorkshopsListid");

                    b.HasIndex("WorkshopsListid");

                    b.ToTable("EmployerWorkshop");
                });

            modelBuilder.Entity("Company.Domain.Board.Board", b =>
                {
                    b.HasOne("Company.Domain.BoardType.BoardType", "BoardType")
                        .WithMany("BoardsList")
                        .HasForeignKey("BoardType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.File1.File1", "File1")
                        .WithMany("BoardsList")
                        .HasForeignKey("File_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardType");

                    b.Navigation("File1");
                });

            modelBuilder.Entity("Company.Domain.ChapterAgg.EntityChapter", b =>
                {
                    b.HasOne("Company.Domain.SubtitleAgg.EntitySubtitle", "EntitySubtitle")
                        .WithMany("Chapters")
                        .HasForeignKey("Subtitle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntitySubtitle");
                });

            modelBuilder.Entity("Company.Domain.ContractAgg.Contract", b =>
                {
                    b.HasOne("Company.Domain.EmployeeAgg.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.empolyerAgg.Employer", "Employer")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.JobAgg.Job", "Job")
                        .WithMany("ContractsList")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.MandatoryHoursAgg.MandatoryHours", null)
                        .WithMany("Contracts")
                        .HasForeignKey("MandatoryHoursid");

                    b.HasOne("Company.Domain.WorkshopAgg.Workshop", "Workshop")
                        .WithMany("Contracts2")
                        .HasForeignKey("WorkshopIds")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Company.Domain.YearlySalaryAgg.YearlySalary", "YearlySalary")
                        .WithMany("Contracts")
                        .HasForeignKey("YearlySalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Workshop");

                    b.Navigation("YearlySalary");
                });

            modelBuilder.Entity("Company.Domain.EmployeeChildrenAgg.EmployeeChildren", b =>
                {
                    b.HasOne("Company.Domain.EmployeeAgg.Employee", "Employee")
                        .WithMany("EmployeeChildrenList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Company.Domain.Evidence.Evidence", b =>
                {
                    b.HasOne("Company.Domain.BoardType.BoardType", "BoardType")
                        .WithMany("EvidencesList")
                        .HasForeignKey("BoardType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.File1.File1", "File1")
                        .WithMany("EvidencesList")
                        .HasForeignKey("File_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardType");

                    b.Navigation("File1");
                });

            modelBuilder.Entity("Company.Domain.EvidenceDetail.EvidenceDetail", b =>
                {
                    b.HasOne("Company.Domain.Evidence.Evidence", "Evidence")
                        .WithMany("EvidenceDetailsList")
                        .HasForeignKey("Evidence_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("Company.Domain.FileAlert.FileAlert", b =>
                {
                    b.HasOne("Company.Domain.FileState.FileState", "FileState")
                        .WithMany("FileAlertsList")
                        .HasForeignKey("FileState_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.File1.File1", "File")
                        .WithMany("FileAlertsList")
                        .HasForeignKey("File_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("FileState");
                });

            modelBuilder.Entity("Company.Domain.FileState.FileState", b =>
                {
                    b.HasOne("Company.Domain.FileTiming.FileTiming", "FileTiming")
                        .WithMany("FileStates")
                        .HasForeignKey("FileTiming_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileTiming");
                });

            modelBuilder.Entity("Company.Domain.HolidayItemAgg.HolidayItem", b =>
                {
                    b.HasOne("Company.Domain.HolidayAgg.Holiday", "Holidayss")
                        .WithMany("HolidayItems")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holidayss");
                });

            modelBuilder.Entity("Company.Domain.LeftWorkAgg.LeftWork", b =>
                {
                    b.HasOne("Company.Domain.EmployeeAgg.Employee", "Employee")
                        .WithMany("LeftWorks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.WorkshopAgg.Workshop", "Workshop")
                        .WithMany("LeftWorks")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Company.Domain.MasterPenaltyTitle.MasterPenaltyTitle", b =>
                {
                    b.HasOne("Company.Domain.MasterPetition.MasterPetition", "MasterPetition")
                        .WithMany("MasterPenaltyTitlesList")
                        .HasForeignKey("MasterPetition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterPetition");
                });

            modelBuilder.Entity("Company.Domain.MasterPetition.MasterPetition", b =>
                {
                    b.HasOne("Company.Domain.BoardType.BoardType", "BoardType")
                        .WithMany("MasterPetitionsList")
                        .HasForeignKey("BoardType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.File1.File1", "File1")
                        .WithMany("MasterPetitionsList")
                        .HasForeignKey("File_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardType");

                    b.Navigation("File1");
                });

            modelBuilder.Entity("Company.Domain.MasterWorkHistory.MasterWorkHistory", b =>
                {
                    b.HasOne("Company.Domain.MasterPetition.MasterPetition", "MasterPetition")
                        .WithMany("MasterWorkHistoriesList")
                        .HasForeignKey("MasterPetition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterPetition");
                });

            modelBuilder.Entity("Company.Domain.ModuleTextManagerAgg.EntityModuleTextManager", b =>
                {
                    b.HasOne("Company.Domain.ModuleAgg.EntityModule", "Module")
                        .WithMany("EntityModuleTextManagers")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.TextManagerAgg.EntityTextManager", "TextManager")
                        .WithMany("EntityModuleTextManagers")
                        .HasForeignKey("TextManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("TextManager");
                });

            modelBuilder.Entity("Company.Domain.PenaltyTitle.PenaltyTitle", b =>
                {
                    b.HasOne("Company.Domain.Petition.Petition", "Petition")
                        .WithMany("PenaltyTitlesList")
                        .HasForeignKey("Petition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");
                });

            modelBuilder.Entity("Company.Domain.Petition.Petition", b =>
                {
                    b.HasOne("Company.Domain.BoardType.BoardType", "BoardType")
                        .WithMany("PetitionsList")
                        .HasForeignKey("BoardType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.File1.File1", "File1")
                        .WithMany("PetitionsList")
                        .HasForeignKey("File_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardType");

                    b.Navigation("File1");
                });

            modelBuilder.Entity("Company.Domain.ProceedingSession.ProceedingSession", b =>
                {
                    b.HasOne("Company.Domain.Board.Board", "Board")
                        .WithMany("ProceedingSessionsList")
                        .HasForeignKey("Board_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Company.Domain.SubtitleAgg.EntitySubtitle", b =>
                {
                    b.HasOne("Company.Domain.SubtitleAgg.EntitySubtitle", null)
                        .WithMany("Subtitles")
                        .HasForeignKey("EntitySubtitleid");

                    b.HasOne("Company.Domain.OriginalTitleAgg.EntityOriginalTitle", "EntityOriginalTitle")
                        .WithMany("Subtitles")
                        .HasForeignKey("OriginalTitle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityOriginalTitle");
                });

            modelBuilder.Entity("Company.Domain.Task.Task", b =>
                {
                    b.HasOne("Company.Domain.TaskTitle.TaskTitle", "TaskTitle")
                        .WithMany("TasksList")
                        .HasForeignKey("TaskTitle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskTitle");
                });

            modelBuilder.Entity("Company.Domain.TaskStatus.TaskStatus", b =>
                {
                    b.HasOne("Company.Domain.Task.Task", "Task")
                        .WithOne("TaskStatus")
                        .HasForeignKey("Company.Domain.TaskStatus.TaskStatus", "Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Company.Domain.WorkHistory.WorkHistory", b =>
                {
                    b.HasOne("Company.Domain.Petition.Petition", "Petition")
                        .WithMany("WorkHistoriesList")
                        .HasForeignKey("Petition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Petition");
                });

            modelBuilder.Entity("Company.Domain.WorkingHoursAgg.WorkingHours", b =>
                {
                    b.HasOne("Company.Domain.ContractAgg.Contract", "Contracts")
                        .WithMany("WorkingHoursList")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Company.Domain.WorkingHoursItemsAgg.WorkingHoursItems", b =>
                {
                    b.HasOne("Company.Domain.WorkingHoursAgg.WorkingHours", "WorkingHourses")
                        .WithMany("WorkingHoursItemsList")
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkingHourses");
                });

            modelBuilder.Entity("Company.Domain.WorkshopAccountAgg.WorkshopAccount", b =>
                {
                    b.HasOne("Company.Domain.WorkshopAgg.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Company.Domain.WorkshopEmployerAgg.WorkshopEmployer", b =>
                {
                    b.HasOne("Company.Domain.empolyerAgg.Employer", "Employer")
                        .WithMany("WorkshopEmployers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.WorkshopAgg.Workshop", "Workshop")
                        .WithMany("WorkshopEmployers")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Company.Domain.YearlySalaryItemsAgg.YearlySalaryItem", b =>
                {
                    b.HasOne("Company.Domain.YearlySalaryAgg.YearlySalary", "YearlySalary")
                        .WithMany("YearlySalaryItemsList")
                        .HasForeignKey("YearlySalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearlySalary");
                });

            modelBuilder.Entity("Company.Domain.empolyerAgg.Employer", b =>
                {
                    b.HasOne("Company.Domain.ContarctingPartyAgg.PersonalContractingParty", "ContractingParty")
                        .WithMany("Employers")
                        .HasForeignKey("ContractingPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractingParty");
                });

            modelBuilder.Entity("EmployerWorkshop", b =>
                {
                    b.HasOne("Company.Domain.empolyerAgg.Employer", null)
                        .WithMany()
                        .HasForeignKey("EmployersListid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Domain.WorkshopAgg.Workshop", null)
                        .WithMany()
                        .HasForeignKey("WorkshopsListid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Domain.Board.Board", b =>
                {
                    b.Navigation("ProceedingSessionsList");
                });

            modelBuilder.Entity("Company.Domain.BoardType.BoardType", b =>
                {
                    b.Navigation("BoardsList");

                    b.Navigation("EvidencesList");

                    b.Navigation("MasterPetitionsList");

                    b.Navigation("PetitionsList");
                });

            modelBuilder.Entity("Company.Domain.ContarctingPartyAgg.PersonalContractingParty", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("Company.Domain.ContractAgg.Contract", b =>
                {
                    b.Navigation("WorkingHoursList");
                });

            modelBuilder.Entity("Company.Domain.EmployeeAgg.Employee", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("EmployeeChildrenList");

                    b.Navigation("LeftWorks");
                });

            modelBuilder.Entity("Company.Domain.Evidence.Evidence", b =>
                {
                    b.Navigation("EvidenceDetailsList");
                });

            modelBuilder.Entity("Company.Domain.File1.File1", b =>
                {
                    b.Navigation("BoardsList");

                    b.Navigation("EvidencesList");

                    b.Navigation("FileAlertsList");

                    b.Navigation("MasterPetitionsList");

                    b.Navigation("PetitionsList");
                });

            modelBuilder.Entity("Company.Domain.FileState.FileState", b =>
                {
                    b.Navigation("FileAlertsList");
                });

            modelBuilder.Entity("Company.Domain.FileTiming.FileTiming", b =>
                {
                    b.Navigation("FileStates");
                });

            modelBuilder.Entity("Company.Domain.HolidayAgg.Holiday", b =>
                {
                    b.Navigation("HolidayItems");
                });

            modelBuilder.Entity("Company.Domain.JobAgg.Job", b =>
                {
                    b.Navigation("ContractsList");
                });

            modelBuilder.Entity("Company.Domain.MandatoryHoursAgg.MandatoryHours", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Company.Domain.MasterPetition.MasterPetition", b =>
                {
                    b.Navigation("MasterPenaltyTitlesList");

                    b.Navigation("MasterWorkHistoriesList");
                });

            modelBuilder.Entity("Company.Domain.ModuleAgg.EntityModule", b =>
                {
                    b.Navigation("EntityModuleTextManagers");
                });

            modelBuilder.Entity("Company.Domain.OriginalTitleAgg.EntityOriginalTitle", b =>
                {
                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("Company.Domain.Petition.Petition", b =>
                {
                    b.Navigation("PenaltyTitlesList");

                    b.Navigation("WorkHistoriesList");
                });

            modelBuilder.Entity("Company.Domain.SubtitleAgg.EntitySubtitle", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("Company.Domain.Task.Task", b =>
                {
                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Company.Domain.TaskTitle.TaskTitle", b =>
                {
                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("Company.Domain.TextManagerAgg.EntityTextManager", b =>
                {
                    b.Navigation("EntityModuleTextManagers");
                });

            modelBuilder.Entity("Company.Domain.WorkingHoursAgg.WorkingHours", b =>
                {
                    b.Navigation("WorkingHoursItemsList");
                });

            modelBuilder.Entity("Company.Domain.WorkshopAgg.Workshop", b =>
                {
                    b.Navigation("Contracts2");

                    b.Navigation("LeftWorks");

                    b.Navigation("WorkshopEmployers");
                });

            modelBuilder.Entity("Company.Domain.YearlySalaryAgg.YearlySalary", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("YearlySalaryItemsList");
                });

            modelBuilder.Entity("Company.Domain.empolyerAgg.Employer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("WorkshopEmployers");
                });
#pragma warning restore 612, 618
        }
    }
}
